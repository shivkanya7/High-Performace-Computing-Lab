//Vector Vector addition using shared

#include <stdlib.h>   
#include <stdio.h>    
#include <omp.h>   

int main (int argc, char *argv[]) 
{
	int * a;
	int * b; 	
	int * c;
    int i,n;  
	  
    a = (int *) malloc(sizeof(int)*n);
	b = (int *) malloc(sizeof(int)*n);
	c = (int *) malloc(sizeof(int)*n);
	
	
	printf("Enter no of elements in array:");
	scanf("%d",&n);
    for(i=0; i<n; i++)
	{
        a[i] = i;
        b[i] =i + 100;
    }


	#pragma omp parallel for shared(a,b,c)  num_threads(n/3)
        for(i=0; i<n; i++) 
		{
	 		c[i] = a[i]+b[i];
			printf("Thread %d works on element %d\n", omp_get_thread_num(), i);

        }
	
		printf("i\ta[i]\t+\tb[i]\t=\tc[i]\n");
        for(i=0; i<n; i++)
		{
			printf("%d\t%d\t\t%d\t\t%d\n", i, a[i], b[i], c[i]);
        }
	
        free(a);  free(b); free(c);
	
	return 0;
}
